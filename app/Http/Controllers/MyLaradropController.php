<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Jasekz\Laradrop\Http\Controllers\LaradropController as LaradropController;
use App\Models\Project;


use Illuminate\Support\Facades\Input;
use  Exception, File, Storage;

class MyLaradropController extends LaradropController
{
    public function view(){
        return view('gallery');
    }

    /**
     * Return all files which belong to the parent (pid),
     * or root if no pid provided.
     *
     * @return JsonResponse
     */
    public function index(){
        try {
            $files = $this->file->get(Input::get('pid'));

            return response()->json([
                'status' => 'success',
                'data' => $files,
            ]);
        }

        catch (Exception $e) {
            return $this->handleError($e);
        }

//        return parent::index(); // TODO: Change the autogenerated stub
    }

    /**
     * Return html containers
     *
     * @return JsonResponse
     */
    public function getContainers()
    {
        return response()->json([
            'status' => 'success',
            'data' => [
                'main' => view('laradrop::mainContainer')->render(),
                'preview' => view('laradrop::previewContainer')->render(),
                'file' => view('laradrop::fileContainer')->render(),
            ]
        ]);
    }
    public function getConnectors(request $request, $id)
    {
        $extraConfig = array('dir_filemanager'=>'/admin');
        $f = FilemanagerLaravel::Filemanager($extraConfig);
        $f->connector_url = url('/').'/admin/filemanager/connectors';
        $f->run();
    }

    /**
     * Create a folder
     *
     * @return JsonResponse
     */
    public function create()
    {
        try {
            return parent::create();
            $folderName ='eer';
            $fileData['alias'] = Input::get('filename') ? Input::get('filename') : $folderName;
            $fileData['model'] = 'project';
            $fileData['model_id'] = 'folder';
            $fileData['type'] = 'folder';
            if(Input::get('pid') > 0) {
                $fileData['parent_id'] = Input::get('pid');
            }

            $this->file->create($fileData);

            return response()->json([
                'status' => 'success'
            ]);
        }

        catch (Exception $e) {
            return $this->handleError($e);
        }
    }

    /**
     * Upload and store new file.
     *
     * @return JsonResponse
     */
    public function store()
    {
        $parent_resutl = parent::store(); // TODO: Change the autogenerated stub
        $proyect = new Project();
        $proyect->save();
        return $parent_resutl;
    }

    /**
     * Delete the resource
     *
     * @param $id
     * @return JsonResponse
     */
    public function destroy($id)
    {
        return parent::destroy($id); // TODO: Change the autogenerated stub
    }
}
